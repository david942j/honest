#!/usr/bin/env bash
#
# Usage: honest [-h/--help] [-V/--version]
#               <git-url>
#               <package> [-v=]
# Examples:
#        honest --version
#        honest github:david942j/one_gadget@448e73dfcc60feb08cc71b843387e63a00791477 gem:one_gadget
#        honest https://github.com/pypa/setuptools@v39.0.1 pip:setuptools -v 39.0.1
#        honest ~/path_on_my_laptop/seccomp-tools gem:seccomp-tools -v 1.2.0
#
# Options:
#        -h, --help
#               Show this usage.
#        -V, --version
#               Display version information and exit.
#
# Git Url Parameter:
#        <git-url> can be:
#               - A relative/absolute path.
#               - https://<git org>/<author>/<project>[@<branch|commit|tag>]
#               - <github|bitbucket|gitlab>:<author>/<project>[@<branch|commit|tag>]

set -E
# -------- Commonly used variables -------
HONEST_VERSION="0.0.0"
RED=''
GREEN=''
YELLOW=''
NC=''
if [[ -t 1 ]]; then
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  YELLOW='\033[0;33m'
  NC='\033[0m' # No Color
fi

# -------- Basic functions --------
version() {
  echo "Honest Version $HONEST_VERSION"
}

usage() {
  version
  sed -ne '/^#/!q;s/.\{1,2\}//;1,2d;p' < "$0"
  [ -z "$1" ] || exit "$1"
}

die() {
  echo -e "[${RED}ERROR${NC}] $1"
  exit 2
}

info() {
  echo -e "[${GREEN}INFO${NC}] $1"
}

resolve_link() {
  $(type -p greadlink readlink | head -1) "$1"
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}
HONEST_LIBEXEC="$(abs_dirname "$0")"
export HONEST_PREFIX="$(abs_dirname "$HONEST_LIBEXEC")"
HONEST_SHARE="$HONEST_PREFIX"/share/honest
export HONEST_CWD="$(abs_dirname .)"
export PATH="$HONEST_LIBEXEC:$PATH"

# -------- Option Parsing --------
parse_options() {
  getopt --test > /dev/null
  if [[ $? -ne 4 ]]; then
    echo "Please install gnu-getopt for Mac: \'brew install gnu-getopt\'"
    exit 2
  fi
  local OPTIONS=hVv:
  local LONGOPTIONS=help,version
  PARSED_OPTIONS=$(getopt --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@")
  if [[ $? -ne 0 ]]; then
    exit 2
  fi
}

if [[ $# -eq 0 ]]; then
  usage 1
fi

parse_options "$@"
eval set -- "$PARSED_OPTIONS"

while true; do
  case "$1" in
    -h|--help)
      usage
      exit 0
      ;;
    -V|--version)
      version
      exit 0
      ;;
    -v)
      PACKAGE_VERSION="$2"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Hey you forget to handle '$1'!"
      exit 3
      ;;
  esac
done

if [[ $# -gt 2 ]]; then
  usage
  die "Too many arguments (given $#, expected 2)"
elif [[ $# -ne 2 ]]; then
  usage
  die "You must give both <git-url> and <package>!"
fi

# -------- Download Sources --------

fetch_repo() {
  if [[ -d "$1" ]]; then
    REPO_PATH="$1"
  else
    REPO_PATH="$(honest-clone "$1")"
    [[ $? != 0 ]] && exit 1
  fi
}

in_array() {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

# This function also sets $vendor and $pkg variable
download_package() {
  local arg1="$1"
  vendor=${arg1:0:3}
  pkg=${arg1:4}

  local cmd="honest-$vendor download $pkg"
  # currently supported package vendors
  vendors=("gem")
  in_array "$vendor" "${vendors[@]}"
  if [[ ${arg1:3:1} != ':' || $? -ne 0 ]]; then
    usage
    die "Invalid package name \"$arg1\", see examples."
  fi
  if [[ $# -ne 1 ]]; then
    cmd+=" -v $2"
  fi
  PACKAGE_PATH="$($cmd)"
  if [[ $? -ne 0 ]]; then
    die "$PACKAGE_PATH"
  fi
}

fetch_repo "$1"
download_package "$2" $PACKAGE_VERSION

vendor_diff() {
  if [[ "$vendor" == 'gem' ]]; then
    # we have used gem.. so ruby must be installed
    /usr/bin/env ruby "$HONEST_SHARE"/gem/diff.rb $@
  else
    exit 1
  fi
  if [[ $? -eq 0 ]]; then
    info "OK, ${YELLOW}$pkg${NC} is ${GREEN}Honest${NC}!"
  fi
}

vendor_diff "$REPO_PATH" "$PACKAGE_PATH"
