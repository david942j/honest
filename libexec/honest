#!/usr/bin/env bash
#
# Usage: honest [-h/--help] [--version]
#               <git-url>
#               <package> [-v version[:version]]
#
# Examples:
#        honest --version
#        honest github:david942j/one_gadget gem:one_gadget
#        honest github:david942j/one_gadget gem:one_gadget -v master:1.6.0
#        honest https://github.com/pypa/setuptools pip:setuptools -v 39.0.1
#        honest ~/path_on_my_laptop/seccomp-tools gem:seccomp-tools -v 1.2.0
#
# Options:
#        -h, --help
#               Show this usage.
#        --version
#               Display version information and exit.
#
# Git Url Parameter:
#        <git-url> can be:
#               - A relative/absolute path
#               - An url like https://<git host>/<author>/<project>
#               - <github|bitbucket|gitlab>:<author>/<project>
#        If no branch/commit/tag is specified in the `-v` option, the latest release(tag) will be used.
#        With this behavior we can have the simplest usage of honest: `$ honest github:user/proj pip:proj`.

# Compatibility to MAC
[[ "$OSTYPE" == "darwin"* ]] && readlink() { echo $(cd $(dirname "$2") && pwd)/$(basename "$2"); }

SCRIPT_DIR="$(readlink -f "$(dirname "$0")")"
# Import common functions and variables of honest
source "$SCRIPT_DIR"/../share/honest/common.sh

# -------- Commonly used variables -------
HONEST_ROOT="$SCRIPT_DIR"/..
HONEST_SHARE="$HONEST_ROOT"/share/honest
export PATH="$HONEST_ROOT/libexec:$PATH"

SUPPORTED_PROTOCOLS=(local git gem)

protocol_of() {
  case "$1" in
    http://*|https://*|git* )  echo "git" ;;
    gem:* ) echo "gem" ;;
    pip:* ) echo "pip" ;;
    * )
      [[ -d "$1" ]] && echo "local" && return 0
      echo "${1%%:*}"
  esac
}

is_honest() {
  local vendor=${1%%:*}
  local repo_path=$2
  local pkg_path=$3
  local ret=0

  case "$vendor" in
    gem )
      /usr/bin/env ruby "$HONEST_SHARE"/gem/diff.rb "$repo_path" "$pkg_path"
      ret=$?
      ;;
    * )
      die "Vendor '$vendor' is currently not supported"
      ;;
  esac

  # Show the differences
  if [[ $ret != 0 ]]; then
    git --no-pager diff --no-index --diff-filter=M "$repo_path" "$pkg_path"/data
  fi

  return $ret
}

# A dummy function
honest-local() { return 0; }

main() {
  local package_ver=()
  local args=()

  # Parse arguments
  while [[ "$1" != "" ]]; do
    case "$1" in
      -h|--help )
        usage
        exit 0
        ;;
      --version)
        version
        exit 0
        ;;
      -v)
        # Split string into array with delimiter ':'
        package_ver=(${2//:/ })
        shift 2
        ;;
      * )
        # Exit on argument starting with hyphen "-"
        [[ "$1" == "-"* ]] && die "Unknown argument $1"
        # Remember the string type arguments in the array
        args+=("$1")
        shift
        ;;
    esac
  done

  # Check # of input arguments after parsing the input arguments
  [[ ${#args[@]} == 0 ]] && usage && exit 1
  [[ ${#args[@]} < 2 ]] && die "Both <git-url> and <package> are required!"

  local temp_dirs=()
  local ref_dirs=()
  local default_pkg_ver=${package_ver[0]}
  for ((i=0; i<2; i++)) do
    local pkg="${args[i]}"
    local ver="${package_ver[i]}"
    local protocol=$(protocol_of "$pkg")
    local path=$(get_tmp_dir honest-XXXXXXXXXX)

    [[ "$ver" == "" ]] && ver=$default_pkg_ver

    # Create a temporary directory for extracting the package
    mkdir -p "$path"
    temp_dirs+=("$path")
    [[ $protocol == "local" ]] && ref_dirs+=("$pkg") || ref_dirs+=("$path")

    # Call protocol-specific helper to download/extract the package
    if $(in_array $protocol ${SUPPORTED_PROTOCOLS[@]}); then
      info "Preparing '${pkg}'..."
      honest-$protocol "$pkg" "$path" -v "$ver"
      [[ $? != 0 ]] && die "Failed..."
    else
      die "Protocol '$protocol' is not supported"
    fi
  done

  # Compare two projects and test its honesty
  info "Calculating the honesty..."
  is_honest ${args[1]} "${ref_dirs[0]}" "${ref_dirs[1]}"
  if [[ $? == 0 ]]; then
    info "OK, ${YELLOW}${args[1]#*:}${NC} is ${GREEN}Honest${NC}!"
  else
    info "NO, ${YELLOW}${args[1]#*:}${NC} is ${RED}Unhonest${NC}!"
  fi

  # Clean up the environment
  rm -rf "${temp_dirs[@]}"
}

main "$@"
