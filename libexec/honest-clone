#!/usr/bin/env bash
#
# Usage: honest-clone <git-url>
#
# Git Url Parameter:
#        <git-url> can be:
#               - https://<git org>/<author>/<project>[@<branch|commit|tag>]
#               - <github|bitbucket|gitlab>:<author>/<project>[@<branch|commit|tag>]

SCRIPT_DIR="$(readlink -f "$(dirname "$0")")"
# Import common functions and variables of honest
source "$SCRIPT_DIR"/../share/honest/honest-common.sh

#######################################
# Convert <vendor>:<author>/<project>[@..] to https://<vendor's url>/<author>/<project>[@..]
# When failed to convert the format, the original string will be return.
# Globals:
#   None
# Arguments:
#   <Repo> The repo name with format '<vendor>:<author>/<project>[@..]'
# Returns:
#   None
#   Echos the transformed string
#######################################
abbr_form() {
  local vendor=${1%%:*}
  local repo=${1#*:}
  local index=$(get_index "$vendor" "${REPO_VENDORS[@]}")

  if [[ "$1" == "https://"* ]]; then
    # Return the original string if it's already in the format
    echo "$1"
  elif [[ "$index" != "-1" ]]; then
    # Return the URL if found
    echo "https://${REPO_VENDORS_HOST[$index]}/$repo"
  else
    # Return the original string if fail to parse
    echo "$1"
  fi
  return 0
}

#######################################
# Parse the tag string from git URL string which can be
# 'https://<author>@github.com/<authors>/<repo>@v1.00'.
# The tag string will be 'v1.00' in this case.
# Globals:
#   None
# Arguments:
#   <Repo> The repo name with format '<vendor>:<author>/<project>[@..]'
# Returns:
#   None
#   Echos the tag string; empty if not found
#######################################
get_tag_from_url() {
  local url=${1#*//} # Remove string before //
  local proj_path=${url#*/} # Remove string before the first /
  local tag=$([[ "$proj_path" == *"@"* ]] && echo ${proj_path##*@} || echo "")

  echo $tag
}

git_clone() {
  local url="$1"
  local tag="$2"
  local path="$3"
  set -e
  # TODO Use shallow clone or other techniques to improve the speed
  git clone "$url" "$path" >/dev/null
  cd $path
  # if $tag is not present, checkout to the latest release.
  tag="${tag:-$(git describe --tags `git rev-list --tags --max-count=1 2>/dev/null` 2>/dev/null)}"
  [[ "$tag" != "" ]] && git checkout --detach "$tag" >/dev/null
  set +e
}

main() {
  [[ $# != 1 ]] && usage && exit 1
  ([[ $1 == "-h" ]] || [[ $1 == "--help" ]]) && usage && exit 0

  # Verify the input arguments
  check_repo_format "$1"

  # Convert the format
  local url=$(abbr_form "$1")

  # Retrieve the tag string from url
  local tag=$(get_tag_from_url $url)

  # Split the string into two parts, repo and tag iff the tag exists in url.
  [[ "$tag" != "" ]] && url=${1%@*}

  local path=$(get_hashed_name honest-XXXXXXXXXX)
  git_clone "$url" "$tag" "$path"

  # Return the path to caller
  echo "$path"
}

main "$@"
